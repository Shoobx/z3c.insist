======================================
z3c.insist -- Persistence to ini files
======================================

Suppose we have an object with some schema:

    >>> import zope.interface
    >>> import zope.schema

    >>> class Person(object):
    ...     firstname = u"Albertas"
    ...     lastname = u"Agejevas"
    ...     weight = 42
    ...     yacht = None

    >>> p = Person()

    >>> class IPerson(zope.interface.Interface):
    ...     firstname = zope.schema.TextLine(title=u"First Name")
    ...     lastname = zope.schema.TextLine(title=u"Last Name")
    ...     weight = zope.schema.Int(title=u"Weight")
    ...     yacht = zope.schema.TextLine(title=u"Yacht Name")

Now we can create a store that will dump and restore the state of an
object in an *.ini file:

    >>> from z3c.insist import insist
    >>> store = insist.ConfigurationStore.makeStore(p, IPerson, 'person')
    >>> state = store.dumps()
    >>> print state
    [person]
    firstname = Albertas
    lastname = Agejevas
    weight = 42
    yacht = !None

Similarly, the store can load the object state from a config file:

    >>> p.firstname = p.lastname = p.weight = p.yacht = None
    >>> store.loads(state)
    >>> from pprint import pprint
    >>> pprint(p.__dict__)
    {'firstname': u'Albertas',
     'lastname': u'Agejevas',
     'weight': 42,
     'yacht': None}


Fields
~~~~~~

The store can provide an attribute with a list of fields to process:

    >>> store.fields = ('firstname', 'lastname')
    >>> print store.dumps()
    [person]
    firstname = Albertas
    lastname = Agejevas

It works for loading, too:

    >>> store.loads("""\
    ... [person]
    ... firstname = Albertas
    ... lastname = Agejevas
    ... yacht = Titanic
    ... """)
    >>> p.yacht


Custom field serialization
~~~~~~~~~~~~~~~~~~~~~~~~~~

The store can have custom methods to load and dump particular fields:

    >>> def dump_lastname(value):
    ...     return value.upper()
    >>> store.dump_lastname = dump_lastname
    >>> print store.dumps()
    [person]
    firstname = Albertas
    lastname = AGEJEVAS

    >>> def load_lastname(value):
    ...     return value.title()
    >>> store.load_lastname = load_lastname
    >>> store.loads("""\
    ... [person]
    ... firstname = Albertas
    ... lastname = AGEJEVAS
    ... """)
    >>> p.lastname
    'Agejevas'


Choice fields
~~~~~~~~~~~~~

Choice fields are serialized to their token and restored to their
value.

Let's set up a vocabulary and a schema using it:

    >>> from zope.schema import vocabulary
    >>> colors = vocabulary.SimpleVocabulary([
    ...     vocabulary.SimpleTerm("#FF0000", token="red"),
    ...     vocabulary.SimpleTerm("#00FF00", token="green"),
    ...     vocabulary.SimpleTerm("#0000FF", token="blue"),
    ...     ])
    >>> class IApple(zope.interface.Interface):
    ...    color = zope.schema.Choice(vocabulary=colors)

    >>> class Apple(object):
    ...    color = "#00FF00"

    >>> papple = Apple()

    >>> store = insist.ConfigurationStore.makeStore(papple, IApple)
    >>> print store.dumps()
    [IApple]
    color = green

    >>> store.loads("""\
    ... [IApple]
    ... color = red
    ... """)
    >>> papple.color
    '#FF0000'

When the value or the term is not in the vocabulary, we get an error:

    >>> papple.color = '#FFFF00'
    >>> print store.dumps()
    Traceback (most recent call last):
      ...
    LookupError: #FFFF00

    >>> store.loads("""\
    ... [IApple]
    ... color = lime
    ... """)
    Traceback (most recent call last):
    ...
    LookupError: lime


Sequence fields
~~~~~~~~~~~~~~~

Tuple and list fields are serialized as multiline values.

    >>> class ICrayons(zope.interface.Interface):
    ...     colors = zope.schema.List(
    ...         value_type=zope.schema.Choice(vocabulary=colors))

    >>> class Crayons(object):
    ...     colors = None

    >>> cr = Crayons()
    >>> cr.colors = ['#0000FF', '#00FF00']
    >>> store = insist.ConfigurationStore.makeStore(cr, ICrayons, 'crayons')
    >>> print store.dumps()
    [crayons]
    colors = blue, green

    >>> store.loads("""\
    ... [crayons]
    ... colors = red, green
    ... """)
    >>> cr.colors
    ['#FF0000', '#00FF00']

    >>> store.loads("""\
    ... [crayons]
    ... colors =
    ... """)
    >>> cr.colors
    []
